
class Score extends React.Component {
	constructor(props) {
		// Se está sendo usado o extends de um classe base, nesse caso o React.Component, antes que possar chamar 'this.'
		// em um construtor é necessário chamar a super classe antes.

		// super chama o construtor pai, nesse caso, o pai é React.Component
		// assim que deixa o constutor disponível na classe derivada, nesse caso, na classe filha.
		super(props);
		this.state = { score: 0 };

		// faz 'this' ficar disponível ao clilcar
		this.incrementScore = this.incrementScore.bind(this);
		this.decrementSCore = this.decrementSCore.bind(this);
	}

	// como incrementScore não está disponível, podemos usar um método chamado bind, que está disponível em qualquer função
	// que permita passar o valor de 'this'.
	incrementScore() {
		// o React sabe que precisa renderizar a interface quando usa setState
		this.setState({
			score: this.state.score + 1
		});
	}

	decrementSCore() {
		this.setState({
			score: this.state.score - 1
		});
	}

	render() {
		return React.createElement(
			"div",
			null,
			React.createElement(
				"h2",
				null,
				"Score board for the ",
				this.props.teamName
			),
			React.createElement(
				"div",
				null,
				"Score: ",
				this.state.score,
				" ",
				React.createElement("br", null),
				React.createElement(
					"button",
					{ onClick: this.incrementScore },
					"+"
				),
				React.createElement(
					"button",
					{ onClick: this.decrementSCore },
					"-"
				)
			)
		);
	}
}

var el = document.getElementById('two');
ReactDOM.render(React.createElement(Score, { teamName: "Tigers" }), el);
